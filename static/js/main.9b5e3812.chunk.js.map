{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","API/index.js","Components/Charts/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Components/Charts/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","Images/Covid19Tracker.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","style","flexDirection","Box","spacing","justify","display","pb","Grid","backgroundColor","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","align","btnGrid","Button","btnMyGov","href","url","fetchData","country","a","changableurl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","options","scales","xAxes","gridLines","yAxes","BarChart","legend","title","text","CountryPicker","handleCountryChange","fetchedCountires","setFetchedCountires","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b5e3812.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\",\"links\":\"Cards_links__1DzOA\",\"btnMyGov\":\"Cards_btnMyGov__uncJL\",\"btnGrid\":\"Cards_btnGrid__2bytm\"};","import React from \"react\";\nimport styles from \"./Cards.module.css\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Please wait..\";\n  }\n  console.log(lastUpdate);\n  return (\n    <div className={styles.container}>\n      <div style={{ flexDirection: \"column\" }}>\n        <Box\n          spacing={3}\n          justify=\"center\"\n          style={{ display: \"flex\", flexDirection: \"row\" }}\n          pb={2}\n        >\n          <Grid\n            style={{ backgroundColor: \"rgba(208, 208, 241, 0.5)\" }}\n            item\n            component={Card}\n            xs={12}\n            md={12}\n            className={cx(styles.card, styles.infected)}\n          >\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Infected\n              </Typography>\n              <Typography variant=\"h5\">\n                <CountUp\n                  start={0}\n                  end={confirmed.value}\n                  duration={3}\n                  separator=\",\"\n                />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of active cases of Covid-19\n              </Typography>\n            </CardContent>\n          </Grid>\n        </Box>\n        <Box\n          spacing={3}\n          justify=\"center\"\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          pb={2}\n        >\n          <Grid\n            style={{ backgroundColor: \"rgba(119, 237, 102, 0.58)\" }}\n            item\n            component={Card}\n            xs={12}\n            md={12}\n            className={cx(styles.card, styles.recovered)}\n          >\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Recovered\n              </Typography>\n              <Typography variant=\"h5\">\n                <CountUp\n                  start={0}\n                  end={recovered.value}\n                  duration={3}\n                  separator=\",\"\n                />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of recoveries from Covid-19\n              </Typography>\n            </CardContent>\n          </Grid>\n        </Box>\n        <Box\n          spacing={3}\n          justify=\"center\"\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          pb={2}\n        >\n          <Grid\n            style={{ backgroundColor: \"rgba(245, 192, 192, 0.5)\" }}\n            item\n            component={Card}\n            xs={12}\n            md={12}\n            className={cx(styles.card, styles.deaths)}\n          >\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Deaths\n              </Typography>\n              <Typography variant=\"h5\">\n                <CountUp\n                  start={0}\n                  end={deaths.value}\n                  duration={3}\n                  separator=\",\"\n                />\n              </Typography>\n              <Typography color=\"textSecondary\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography variant=\"body2\">\n                Number of deaths caused by Covid-19\n              </Typography>\n            </CardContent>\n          </Grid>\n        </Box>\n      </div>\n      <Box\n        spacing={3}\n        justify=\"center\"\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n        pb={2}\n      >\n        <Grid align=\"center\" justify=\"center\">\n          <Grid className={styles.btnGrid}>\n            <Button\n              style={{ backgroundColor: \"#f2e202\" }}\n              className={styles.btnMyGov}\n              variant=\"contained\"\n              color=\"primary\"\n              href=\"https://www.mygov.in/covid-19\"\n            >\n              mygov\n            </Button>\n            <Button\n              style={{ backgroundColor: \"#026af2\" }}\n              className={styles.btnMyGov}\n              variant=\"contained\"\n              color=\"primary\"\n              href=\"https://twitter.com/who?lang=en\"\n            >\n              WHO\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n      <Typography align=\"center\" justify=\"center\" style={{ color: \"#f00000\" }}>\n        Select Country\n      </Typography>\n    </div>\n  );\n};\nexport default Cards;\n","import axios from 'axios';\n\nconst url ='https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changableurl = url;\n    if(country){\n        changableurl = `${url}/countries/${country}`\n    }\n    try {\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changableurl);\n        return {confirmed, recovered, deaths, lastUpdate};\n    }\n    catch(error){\n        console.log(error);\n    }\n};\n\nexport const fetchDailyData = async () =>{\n    try{\n        const {data}  = await axios.get(`${url}/daily`);\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n    }\n    catch(error){\n        return error\n    }\n};\n\nexport const fetchCountries = async () =>{\n    try{\n    const {data:{countries}} = await axios.get(`${url}/countries`);\n    return countries.map((country)=> country.name);\n    }   \n    catch(error){\n        return error\n    }\n};","import React,{useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../API';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css'\nimport { Container } from '@material-ui/core';\n\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\n    //this is a set representation with setter method of a state\n    const [dailyData, setDailyData] = useState([]);\n    \n    useEffect(() => {\n    const fetchAPI = async()=>{\n        setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    },[]);\n\nconst lineChart =(\n    dailyData.length ? ( \n        <Line data={{\n                        labels: dailyData.map(({date}) =>  date),\n                        datasets :[{\n                            data :  dailyData.map(({confirmed}) =>  confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true,\n                        },\n                        {\n                            data :  dailyData.map(({deaths}) =>  deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: true,\n                        }]\n                    }}\n                    options={ {\n                        scales : { xAxes : [ { gridLines : { display : false } } ], yAxes : [ { gridLines : { display : false } } ] }\n                    } }\n                    />):null\n                    );\n\nconst BarChart  =(\n       confirmed?(\n        <Bar\n        data={{\n            labels: ['Infected', 'Recovered', 'Deaths'],\n            datasets:[{\n                label:'People',\n                backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)' ],\n                data:[confirmed.value, recovered.value, deaths.value]\n            }]\n        }}\n        options={{\n            legend:{display:false},\n            title: {display:true, text:`current state in ${country}`}\n        }}\n        />           \n        ): null\n    )\n    return (\n     <div className={styles.container}>\n         {country? BarChart : lineChart}\n     </div>\n    )\n}\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../API';\nconst CountryPicker = ({handleCountryChange}) => {\nconst [fetchedCountires, setFetchedCountires] = useState([]);\n\nuseEffect(()=>{\n    const fetchAPI = async () =>{\n        setFetchedCountires(await fetchCountries());\n    }\n    fetchAPI();\n}, [setFetchedCountires])\nconsole.log(fetchedCountires);\n    return (\n        <FormControl  className={styles.formControl}>    \n        <NativeSelect defaultValue=\"\" onChange ={(e) => handleCountryChange(e.target.value)}  variant=\"filled\">\n            <option value=\"\">Global</option>\n    {fetchedCountires.map((country,i) => <option key={i} value={country}>{country}</option>)}\n        </NativeSelect>\n        </FormControl >\n    )\n}\nexport default CountryPicker;","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport { Cards, Charts, CountryPicker } from \"./Components\";\nimport { fetchData } from \"./API\"; //we dont have to specify index file name if your file name is index\nimport coronaImage from \"./Images/Covid19Tracker.png\";\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\"\n  };\n  async componentDidMount() {\n    const data = await fetchData();\n    console.log(data);\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n    this.setState({ data: data, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"Covid-19\" />\n\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\n//first component is App, second parameter is the element we want to render it on\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2vJZd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__4LMvE\"};","module.exports = __webpack_public_path__ + \"static/media/Covid19Tracker.1270cc4d.png\";"],"sourceRoot":""}